// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connection_2eproto

#include <limits>
#include <string>
#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif
#pragma comment(lib, "libprotobuf.lib")
#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connection_2eproto;
namespace db_connection {
class CellValue;
struct CellValueDefaultTypeInternal;
extern CellValueDefaultTypeInternal _CellValue_default_instance_;
class ConnectResult;
struct ConnectResultDefaultTypeInternal;
extern ConnectResultDefaultTypeInternal _ConnectResult_default_instance_;
class QueryRequest;
struct QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResult;
struct QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class RowValue;
struct RowValueDefaultTypeInternal;
extern RowValueDefaultTypeInternal _RowValue_default_instance_;
class UpdateResult;
struct UpdateResultDefaultTypeInternal;
extern UpdateResultDefaultTypeInternal _UpdateResult_default_instance_;
}  // namespace db_connection
PROTOBUF_NAMESPACE_OPEN
template<> ::db_connection::CellValue* Arena::CreateMaybeMessage<::db_connection::CellValue>(Arena*);
template<> ::db_connection::ConnectResult* Arena::CreateMaybeMessage<::db_connection::ConnectResult>(Arena*);
template<> ::db_connection::QueryRequest* Arena::CreateMaybeMessage<::db_connection::QueryRequest>(Arena*);
template<> ::db_connection::QueryResult* Arena::CreateMaybeMessage<::db_connection::QueryResult>(Arena*);
template<> ::db_connection::RowValue* Arena::CreateMaybeMessage<::db_connection::RowValue>(Arena*);
template<> ::db_connection::UpdateResult* Arena::CreateMaybeMessage<::db_connection::UpdateResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace db_connection {

// ===================================================================

class QueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_connection.QueryRequest) */ {
 public:
  inline QueryRequest() : QueryRequest(nullptr) {}
  ~QueryRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRequest& from) {
    QueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_connection.QueryRequest";
  }
  protected:
  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 10,
    kQueryFieldNumber = 11,
  };
  // string id = 10;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string query = 11;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:db_connection.QueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class ConnectResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_connection.ConnectResult) */ {
 public:
  inline ConnectResult() : ConnectResult(nullptr) {}
  ~ConnectResult() override;
  explicit PROTOBUF_CONSTEXPR ConnectResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectResult(const ConnectResult& from);
  ConnectResult(ConnectResult&& from) noexcept
    : ConnectResult() {
    *this = ::std::move(from);
  }

  inline ConnectResult& operator=(const ConnectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResult& operator=(ConnectResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectResult* internal_default_instance() {
    return reinterpret_cast<const ConnectResult*>(
               &_ConnectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectResult& a, ConnectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectResult& from) {
    ConnectResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_connection.ConnectResult";
  }
  protected:
  explicit ConnectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 12,
  };
  // string id = 12;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:db_connection.ConnectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class QueryResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_connection.QueryResult) */ {
 public:
  inline QueryResult() : QueryResult(nullptr) {}
  ~QueryResult() override;
  explicit PROTOBUF_CONSTEXPR QueryResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryResult& from) {
    QueryResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_connection.QueryResult";
  }
  protected:
  explicit QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNamesFieldNumber = 3,
    kRowValuesFieldNumber = 4,
  };
  // repeated string column_names = 3;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;
  public:
  void clear_column_names();
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  void set_column_names(int index, const std::string& value);
  void set_column_names(int index, std::string&& value);
  void set_column_names(int index, const char* value);
  void set_column_names(int index, const char* value, size_t size);
  std::string* add_column_names();
  void add_column_names(const std::string& value);
  void add_column_names(std::string&& value);
  void add_column_names(const char* value);
  void add_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_names();
  private:
  const std::string& _internal_column_names(int index) const;
  std::string* _internal_add_column_names();
  public:

  // repeated .db_connection.RowValue row_values = 4;
  int row_values_size() const;
  private:
  int _internal_row_values_size() const;
  public:
  void clear_row_values();
  ::db_connection::RowValue* mutable_row_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::RowValue >*
      mutable_row_values();
  private:
  const ::db_connection::RowValue& _internal_row_values(int index) const;
  ::db_connection::RowValue* _internal_add_row_values();
  public:
  const ::db_connection::RowValue& row_values(int index) const;
  ::db_connection::RowValue* add_row_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::RowValue >&
      row_values() const;

  // @@protoc_insertion_point(class_scope:db_connection.QueryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::RowValue > row_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class UpdateResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_connection.UpdateResult) */ {
 public:
  inline UpdateResult() : UpdateResult(nullptr) {}
  ~UpdateResult() override;
  explicit PROTOBUF_CONSTEXPR UpdateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResult(const UpdateResult& from);
  UpdateResult(UpdateResult&& from) noexcept
    : UpdateResult() {
    *this = ::std::move(from);
  }

  inline UpdateResult& operator=(const UpdateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResult& operator=(UpdateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResult* internal_default_instance() {
    return reinterpret_cast<const UpdateResult*>(
               &_UpdateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateResult& a, UpdateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateResult& from) {
    UpdateResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_connection.UpdateResult";
  }
  protected:
  explicit UpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:db_connection.UpdateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class RowValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_connection.RowValue) */ {
 public:
  inline RowValue() : RowValue(nullptr) {}
  ~RowValue() override;
  explicit PROTOBUF_CONSTEXPR RowValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowValue(const RowValue& from);
  RowValue(RowValue&& from) noexcept
    : RowValue() {
    *this = ::std::move(from);
  }

  inline RowValue& operator=(const RowValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowValue& operator=(RowValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowValue* internal_default_instance() {
    return reinterpret_cast<const RowValue*>(
               &_RowValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RowValue& a, RowValue& b) {
    a.Swap(&b);
  }
  inline void Swap(RowValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RowValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RowValue& from) {
    RowValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_connection.RowValue";
  }
  protected:
  explicit RowValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellValuesFieldNumber = 5,
  };
  // repeated .db_connection.CellValue cell_values = 5;
  int cell_values_size() const;
  private:
  int _internal_cell_values_size() const;
  public:
  void clear_cell_values();
  ::db_connection::CellValue* mutable_cell_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::CellValue >*
      mutable_cell_values();
  private:
  const ::db_connection::CellValue& _internal_cell_values(int index) const;
  ::db_connection::CellValue* _internal_add_cell_values();
  public:
  const ::db_connection::CellValue& cell_values(int index) const;
  ::db_connection::CellValue* add_cell_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::CellValue >&
      cell_values() const;

  // @@protoc_insertion_point(class_scope:db_connection.RowValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::CellValue > cell_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class CellValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_connection.CellValue) */ {
 public:
  inline CellValue() : CellValue(nullptr) {}
  ~CellValue() override;
  explicit PROTOBUF_CONSTEXPR CellValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellValue(const CellValue& from);
  CellValue(CellValue&& from) noexcept
    : CellValue() {
    *this = ::std::move(from);
  }

  inline CellValue& operator=(const CellValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellValue& operator=(CellValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellValue& default_instance() {
    return *internal_default_instance();
  }
  enum CellTypeCase {
    kColString = 6,
    kColI32 = 7,
    kColTime = 8,
    kColFloat = 9,
    kColDouble = 16,
    kColI64 = 17,
    kColBool = 18,
    CELL_TYPE_NOT_SET = 0,
  };

  static inline const CellValue* internal_default_instance() {
    return reinterpret_cast<const CellValue*>(
               &_CellValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CellValue& a, CellValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CellValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellValue& from) {
    CellValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_connection.CellValue";
  }
  protected:
  explicit CellValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColStringFieldNumber = 6,
    kColI32FieldNumber = 7,
    kColTimeFieldNumber = 8,
    kColFloatFieldNumber = 9,
    kColDoubleFieldNumber = 16,
    kColI64FieldNumber = 17,
    kColBoolFieldNumber = 18,
  };
  // string col_string = 6;
  bool has_col_string() const;
  private:
  bool _internal_has_col_string() const;
  public:
  void clear_col_string();
  const std::string& col_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col_string();
  PROTOBUF_NODISCARD std::string* release_col_string();
  void set_allocated_col_string(std::string* col_string);
  private:
  const std::string& _internal_col_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col_string(const std::string& value);
  std::string* _internal_mutable_col_string();
  public:

  // int32 col_i32 = 7;
  bool has_col_i32() const;
  private:
  bool _internal_has_col_i32() const;
  public:
  void clear_col_i32();
  int32_t col_i32() const;
  void set_col_i32(int32_t value);
  private:
  int32_t _internal_col_i32() const;
  void _internal_set_col_i32(int32_t value);
  public:

  // .google.protobuf.Timestamp col_time = 8;
  bool has_col_time() const;
  private:
  bool _internal_has_col_time() const;
  public:
  void clear_col_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& col_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_col_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_col_time();
  void set_allocated_col_time(::PROTOBUF_NAMESPACE_ID::Timestamp* col_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_col_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_col_time();
  public:
  void unsafe_arena_set_allocated_col_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* col_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_col_time();

  // float col_float = 9;
  bool has_col_float() const;
  private:
  bool _internal_has_col_float() const;
  public:
  void clear_col_float();
  float col_float() const;
  void set_col_float(float value);
  private:
  float _internal_col_float() const;
  void _internal_set_col_float(float value);
  public:

  // double col_double = 16;
  bool has_col_double() const;
  private:
  bool _internal_has_col_double() const;
  public:
  void clear_col_double();
  double col_double() const;
  void set_col_double(double value);
  private:
  double _internal_col_double() const;
  void _internal_set_col_double(double value);
  public:

  // int64 col_i64 = 17;
  bool has_col_i64() const;
  private:
  bool _internal_has_col_i64() const;
  public:
  void clear_col_i64();
  int64_t col_i64() const;
  void set_col_i64(int64_t value);
  private:
  int64_t _internal_col_i64() const;
  void _internal_set_col_i64(int64_t value);
  public:

  // bool col_bool = 18;
  bool has_col_bool() const;
  private:
  bool _internal_has_col_bool() const;
  public:
  void clear_col_bool();
  bool col_bool() const;
  void set_col_bool(bool value);
  private:
  bool _internal_col_bool() const;
  void _internal_set_col_bool(bool value);
  public:

  void clear_cell_type();
  CellTypeCase cell_type_case() const;
  // @@protoc_insertion_point(class_scope:db_connection.CellValue)
 private:
  class _Internal;
  void set_has_col_string();
  void set_has_col_i32();
  void set_has_col_time();
  void set_has_col_float();
  void set_has_col_double();
  void set_has_col_i64();
  void set_has_col_bool();

  inline bool has_cell_type() const;
  inline void clear_has_cell_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CellTypeUnion {
      constexpr CellTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_string_;
      int32_t col_i32_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* col_time_;
      float col_float_;
      double col_double_;
      int64_t col_i64_;
      bool col_bool_;
    } cell_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_connection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryRequest

// string id = 10;
inline void QueryRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryRequest::id() const {
  // @@protoc_insertion_point(field_get:db_connection.QueryRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:db_connection.QueryRequest.id)
}
inline std::string* QueryRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:db_connection.QueryRequest.id)
  return _s;
}
inline const std::string& QueryRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void QueryRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryRequest::release_id() {
  // @@protoc_insertion_point(field_release:db_connection.QueryRequest.id)
  return _impl_.id_.Release();
}
inline void QueryRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:db_connection.QueryRequest.id)
}

// string query = 11;
inline void QueryRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& QueryRequest::query() const {
  // @@protoc_insertion_point(field_get:db_connection.QueryRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:db_connection.QueryRequest.query)
}
inline std::string* QueryRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:db_connection.QueryRequest.query)
  return _s;
}
inline const std::string& QueryRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void QueryRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:db_connection.QueryRequest.query)
  return _impl_.query_.Release();
}
inline void QueryRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:db_connection.QueryRequest.query)
}

// -------------------------------------------------------------------

// ConnectResult

// string id = 12;
inline void ConnectResult::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ConnectResult::id() const {
  // @@protoc_insertion_point(field_get:db_connection.ConnectResult.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectResult::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:db_connection.ConnectResult.id)
}
inline std::string* ConnectResult::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:db_connection.ConnectResult.id)
  return _s;
}
inline const std::string& ConnectResult::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ConnectResult::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectResult::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectResult::release_id() {
  // @@protoc_insertion_point(field_release:db_connection.ConnectResult.id)
  return _impl_.id_.Release();
}
inline void ConnectResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:db_connection.ConnectResult.id)
}

// -------------------------------------------------------------------

// QueryResult

// repeated string column_names = 3;
inline int QueryResult::_internal_column_names_size() const {
  return _impl_.column_names_.size();
}
inline int QueryResult::column_names_size() const {
  return _internal_column_names_size();
}
inline void QueryResult::clear_column_names() {
  _impl_.column_names_.Clear();
}
inline std::string* QueryResult::add_column_names() {
  std::string* _s = _internal_add_column_names();
  // @@protoc_insertion_point(field_add_mutable:db_connection.QueryResult.column_names)
  return _s;
}
inline const std::string& QueryResult::_internal_column_names(int index) const {
  return _impl_.column_names_.Get(index);
}
inline const std::string& QueryResult::column_names(int index) const {
  // @@protoc_insertion_point(field_get:db_connection.QueryResult.column_names)
  return _internal_column_names(index);
}
inline std::string* QueryResult::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:db_connection.QueryResult.column_names)
  return _impl_.column_names_.Mutable(index);
}
inline void QueryResult::set_column_names(int index, const std::string& value) {
  _impl_.column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:db_connection.QueryResult.column_names)
}
inline void QueryResult::set_column_names(int index, std::string&& value) {
  _impl_.column_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:db_connection.QueryResult.column_names)
}
inline void QueryResult::set_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db_connection.QueryResult.column_names)
}
inline void QueryResult::set_column_names(int index, const char* value, size_t size) {
  _impl_.column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_connection.QueryResult.column_names)
}
inline std::string* QueryResult::_internal_add_column_names() {
  return _impl_.column_names_.Add();
}
inline void QueryResult::add_column_names(const std::string& value) {
  _impl_.column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db_connection.QueryResult.column_names)
}
inline void QueryResult::add_column_names(std::string&& value) {
  _impl_.column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db_connection.QueryResult.column_names)
}
inline void QueryResult::add_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db_connection.QueryResult.column_names)
}
inline void QueryResult::add_column_names(const char* value, size_t size) {
  _impl_.column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db_connection.QueryResult.column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResult::column_names() const {
  // @@protoc_insertion_point(field_list:db_connection.QueryResult.column_names)
  return _impl_.column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResult::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:db_connection.QueryResult.column_names)
  return &_impl_.column_names_;
}

// repeated .db_connection.RowValue row_values = 4;
inline int QueryResult::_internal_row_values_size() const {
  return _impl_.row_values_.size();
}
inline int QueryResult::row_values_size() const {
  return _internal_row_values_size();
}
inline void QueryResult::clear_row_values() {
  _impl_.row_values_.Clear();
}
inline ::db_connection::RowValue* QueryResult::mutable_row_values(int index) {
  // @@protoc_insertion_point(field_mutable:db_connection.QueryResult.row_values)
  return _impl_.row_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::RowValue >*
QueryResult::mutable_row_values() {
  // @@protoc_insertion_point(field_mutable_list:db_connection.QueryResult.row_values)
  return &_impl_.row_values_;
}
inline const ::db_connection::RowValue& QueryResult::_internal_row_values(int index) const {
  return _impl_.row_values_.Get(index);
}
inline const ::db_connection::RowValue& QueryResult::row_values(int index) const {
  // @@protoc_insertion_point(field_get:db_connection.QueryResult.row_values)
  return _internal_row_values(index);
}
inline ::db_connection::RowValue* QueryResult::_internal_add_row_values() {
  return _impl_.row_values_.Add();
}
inline ::db_connection::RowValue* QueryResult::add_row_values() {
  ::db_connection::RowValue* _add = _internal_add_row_values();
  // @@protoc_insertion_point(field_add:db_connection.QueryResult.row_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::RowValue >&
QueryResult::row_values() const {
  // @@protoc_insertion_point(field_list:db_connection.QueryResult.row_values)
  return _impl_.row_values_;
}

// -------------------------------------------------------------------

// UpdateResult

// string message = 2;
inline void UpdateResult::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateResult::message() const {
  // @@protoc_insertion_point(field_get:db_connection.UpdateResult.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateResult::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:db_connection.UpdateResult.message)
}
inline std::string* UpdateResult::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:db_connection.UpdateResult.message)
  return _s;
}
inline const std::string& UpdateResult::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UpdateResult::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateResult::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateResult::release_message() {
  // @@protoc_insertion_point(field_release:db_connection.UpdateResult.message)
  return _impl_.message_.Release();
}
inline void UpdateResult::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:db_connection.UpdateResult.message)
}

// -------------------------------------------------------------------

// RowValue

// repeated .db_connection.CellValue cell_values = 5;
inline int RowValue::_internal_cell_values_size() const {
  return _impl_.cell_values_.size();
}
inline int RowValue::cell_values_size() const {
  return _internal_cell_values_size();
}
inline void RowValue::clear_cell_values() {
  _impl_.cell_values_.Clear();
}
inline ::db_connection::CellValue* RowValue::mutable_cell_values(int index) {
  // @@protoc_insertion_point(field_mutable:db_connection.RowValue.cell_values)
  return _impl_.cell_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::CellValue >*
RowValue::mutable_cell_values() {
  // @@protoc_insertion_point(field_mutable_list:db_connection.RowValue.cell_values)
  return &_impl_.cell_values_;
}
inline const ::db_connection::CellValue& RowValue::_internal_cell_values(int index) const {
  return _impl_.cell_values_.Get(index);
}
inline const ::db_connection::CellValue& RowValue::cell_values(int index) const {
  // @@protoc_insertion_point(field_get:db_connection.RowValue.cell_values)
  return _internal_cell_values(index);
}
inline ::db_connection::CellValue* RowValue::_internal_add_cell_values() {
  return _impl_.cell_values_.Add();
}
inline ::db_connection::CellValue* RowValue::add_cell_values() {
  ::db_connection::CellValue* _add = _internal_add_cell_values();
  // @@protoc_insertion_point(field_add:db_connection.RowValue.cell_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_connection::CellValue >&
RowValue::cell_values() const {
  // @@protoc_insertion_point(field_list:db_connection.RowValue.cell_values)
  return _impl_.cell_values_;
}

// -------------------------------------------------------------------

// CellValue

// string col_string = 6;
inline bool CellValue::_internal_has_col_string() const {
  return cell_type_case() == kColString;
}
inline bool CellValue::has_col_string() const {
  return _internal_has_col_string();
}
inline void CellValue::set_has_col_string() {
  _impl_._oneof_case_[0] = kColString;
}
inline void CellValue::clear_col_string() {
  if (_internal_has_col_string()) {
    _impl_.cell_type_.col_string_.Destroy();
    clear_has_cell_type();
  }
}
inline const std::string& CellValue::col_string() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_string)
  return _internal_col_string();
}
template <typename ArgT0, typename... ArgT>
inline void CellValue::set_col_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_col_string()) {
    clear_cell_type();
    set_has_col_string();
    _impl_.cell_type_.col_string_.InitDefault();
  }
  _impl_.cell_type_.col_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:db_connection.CellValue.col_string)
}
inline std::string* CellValue::mutable_col_string() {
  std::string* _s = _internal_mutable_col_string();
  // @@protoc_insertion_point(field_mutable:db_connection.CellValue.col_string)
  return _s;
}
inline const std::string& CellValue::_internal_col_string() const {
  if (_internal_has_col_string()) {
    return _impl_.cell_type_.col_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CellValue::_internal_set_col_string(const std::string& value) {
  if (!_internal_has_col_string()) {
    clear_cell_type();
    set_has_col_string();
    _impl_.cell_type_.col_string_.InitDefault();
  }
  _impl_.cell_type_.col_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CellValue::_internal_mutable_col_string() {
  if (!_internal_has_col_string()) {
    clear_cell_type();
    set_has_col_string();
    _impl_.cell_type_.col_string_.InitDefault();
  }
  return _impl_.cell_type_.col_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* CellValue::release_col_string() {
  // @@protoc_insertion_point(field_release:db_connection.CellValue.col_string)
  if (_internal_has_col_string()) {
    clear_has_cell_type();
    return _impl_.cell_type_.col_string_.Release();
  } else {
    return nullptr;
  }
}
inline void CellValue::set_allocated_col_string(std::string* col_string) {
  if (has_cell_type()) {
    clear_cell_type();
  }
  if (col_string != nullptr) {
    set_has_col_string();
    _impl_.cell_type_.col_string_.InitAllocated(col_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:db_connection.CellValue.col_string)
}

// int32 col_i32 = 7;
inline bool CellValue::_internal_has_col_i32() const {
  return cell_type_case() == kColI32;
}
inline bool CellValue::has_col_i32() const {
  return _internal_has_col_i32();
}
inline void CellValue::set_has_col_i32() {
  _impl_._oneof_case_[0] = kColI32;
}
inline void CellValue::clear_col_i32() {
  if (_internal_has_col_i32()) {
    _impl_.cell_type_.col_i32_ = 0;
    clear_has_cell_type();
  }
}
inline int32_t CellValue::_internal_col_i32() const {
  if (_internal_has_col_i32()) {
    return _impl_.cell_type_.col_i32_;
  }
  return 0;
}
inline void CellValue::_internal_set_col_i32(int32_t value) {
  if (!_internal_has_col_i32()) {
    clear_cell_type();
    set_has_col_i32();
  }
  _impl_.cell_type_.col_i32_ = value;
}
inline int32_t CellValue::col_i32() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_i32)
  return _internal_col_i32();
}
inline void CellValue::set_col_i32(int32_t value) {
  _internal_set_col_i32(value);
  // @@protoc_insertion_point(field_set:db_connection.CellValue.col_i32)
}

// .google.protobuf.Timestamp col_time = 8;
inline bool CellValue::_internal_has_col_time() const {
  return cell_type_case() == kColTime;
}
inline bool CellValue::has_col_time() const {
  return _internal_has_col_time();
}
inline void CellValue::set_has_col_time() {
  _impl_._oneof_case_[0] = kColTime;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CellValue::release_col_time() {
  // @@protoc_insertion_point(field_release:db_connection.CellValue.col_time)
  if (_internal_has_col_time()) {
    clear_has_cell_type();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cell_type_.col_time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cell_type_.col_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CellValue::_internal_col_time() const {
  return _internal_has_col_time()
      ? *_impl_.cell_type_.col_time_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CellValue::col_time() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_time)
  return _internal_col_time();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CellValue::unsafe_arena_release_col_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db_connection.CellValue.col_time)
  if (_internal_has_col_time()) {
    clear_has_cell_type();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cell_type_.col_time_;
    _impl_.cell_type_.col_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CellValue::unsafe_arena_set_allocated_col_time(::PROTOBUF_NAMESPACE_ID::Timestamp* col_time) {
  clear_cell_type();
  if (col_time) {
    set_has_col_time();
    _impl_.cell_type_.col_time_ = col_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db_connection.CellValue.col_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CellValue::_internal_mutable_col_time() {
  if (!_internal_has_col_time()) {
    clear_cell_type();
    set_has_col_time();
    _impl_.cell_type_.col_time_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.cell_type_.col_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CellValue::mutable_col_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_col_time();
  // @@protoc_insertion_point(field_mutable:db_connection.CellValue.col_time)
  return _msg;
}

// float col_float = 9;
inline bool CellValue::_internal_has_col_float() const {
  return cell_type_case() == kColFloat;
}
inline bool CellValue::has_col_float() const {
  return _internal_has_col_float();
}
inline void CellValue::set_has_col_float() {
  _impl_._oneof_case_[0] = kColFloat;
}
inline void CellValue::clear_col_float() {
  if (_internal_has_col_float()) {
    _impl_.cell_type_.col_float_ = 0;
    clear_has_cell_type();
  }
}
inline float CellValue::_internal_col_float() const {
  if (_internal_has_col_float()) {
    return _impl_.cell_type_.col_float_;
  }
  return 0;
}
inline void CellValue::_internal_set_col_float(float value) {
  if (!_internal_has_col_float()) {
    clear_cell_type();
    set_has_col_float();
  }
  _impl_.cell_type_.col_float_ = value;
}
inline float CellValue::col_float() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_float)
  return _internal_col_float();
}
inline void CellValue::set_col_float(float value) {
  _internal_set_col_float(value);
  // @@protoc_insertion_point(field_set:db_connection.CellValue.col_float)
}

// double col_double = 16;
inline bool CellValue::_internal_has_col_double() const {
  return cell_type_case() == kColDouble;
}
inline bool CellValue::has_col_double() const {
  return _internal_has_col_double();
}
inline void CellValue::set_has_col_double() {
  _impl_._oneof_case_[0] = kColDouble;
}
inline void CellValue::clear_col_double() {
  if (_internal_has_col_double()) {
    _impl_.cell_type_.col_double_ = 0;
    clear_has_cell_type();
  }
}
inline double CellValue::_internal_col_double() const {
  if (_internal_has_col_double()) {
    return _impl_.cell_type_.col_double_;
  }
  return 0;
}
inline void CellValue::_internal_set_col_double(double value) {
  if (!_internal_has_col_double()) {
    clear_cell_type();
    set_has_col_double();
  }
  _impl_.cell_type_.col_double_ = value;
}
inline double CellValue::col_double() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_double)
  return _internal_col_double();
}
inline void CellValue::set_col_double(double value) {
  _internal_set_col_double(value);
  // @@protoc_insertion_point(field_set:db_connection.CellValue.col_double)
}

// int64 col_i64 = 17;
inline bool CellValue::_internal_has_col_i64() const {
  return cell_type_case() == kColI64;
}
inline bool CellValue::has_col_i64() const {
  return _internal_has_col_i64();
}
inline void CellValue::set_has_col_i64() {
  _impl_._oneof_case_[0] = kColI64;
}
inline void CellValue::clear_col_i64() {
  if (_internal_has_col_i64()) {
    _impl_.cell_type_.col_i64_ = int64_t{0};
    clear_has_cell_type();
  }
}
inline int64_t CellValue::_internal_col_i64() const {
  if (_internal_has_col_i64()) {
    return _impl_.cell_type_.col_i64_;
  }
  return int64_t{0};
}
inline void CellValue::_internal_set_col_i64(int64_t value) {
  if (!_internal_has_col_i64()) {
    clear_cell_type();
    set_has_col_i64();
  }
  _impl_.cell_type_.col_i64_ = value;
}
inline int64_t CellValue::col_i64() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_i64)
  return _internal_col_i64();
}
inline void CellValue::set_col_i64(int64_t value) {
  _internal_set_col_i64(value);
  // @@protoc_insertion_point(field_set:db_connection.CellValue.col_i64)
}

// bool col_bool = 18;
inline bool CellValue::_internal_has_col_bool() const {
  return cell_type_case() == kColBool;
}
inline bool CellValue::has_col_bool() const {
  return _internal_has_col_bool();
}
inline void CellValue::set_has_col_bool() {
  _impl_._oneof_case_[0] = kColBool;
}
inline void CellValue::clear_col_bool() {
  if (_internal_has_col_bool()) {
    _impl_.cell_type_.col_bool_ = false;
    clear_has_cell_type();
  }
}
inline bool CellValue::_internal_col_bool() const {
  if (_internal_has_col_bool()) {
    return _impl_.cell_type_.col_bool_;
  }
  return false;
}
inline void CellValue::_internal_set_col_bool(bool value) {
  if (!_internal_has_col_bool()) {
    clear_cell_type();
    set_has_col_bool();
  }
  _impl_.cell_type_.col_bool_ = value;
}
inline bool CellValue::col_bool() const {
  // @@protoc_insertion_point(field_get:db_connection.CellValue.col_bool)
  return _internal_col_bool();
}
inline void CellValue::set_col_bool(bool value) {
  _internal_set_col_bool(value);
  // @@protoc_insertion_point(field_set:db_connection.CellValue.col_bool)
}

inline bool CellValue::has_cell_type() const {
  return cell_type_case() != CELL_TYPE_NOT_SET;
}
inline void CellValue::clear_has_cell_type() {
  _impl_._oneof_case_[0] = CELL_TYPE_NOT_SET;
}
inline CellValue::CellTypeCase CellValue::cell_type_case() const {
  return CellValue::CellTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db_connection

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
