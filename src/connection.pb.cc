// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#include "connection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace db_connection {
PROTOBUF_CONSTEXPR QueryRequest::QueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRequestDefaultTypeInternal() {}
  union {
    QueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
PROTOBUF_CONSTEXPR ConnectResult::ConnectResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectResultDefaultTypeInternal() {}
  union {
    ConnectResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectResultDefaultTypeInternal _ConnectResult_default_instance_;
PROTOBUF_CONSTEXPR QueryResult::QueryResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_names_)*/{}
  , /*decltype(_impl_.row_values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryResultDefaultTypeInternal() {}
  union {
    QueryResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryResultDefaultTypeInternal _QueryResult_default_instance_;
PROTOBUF_CONSTEXPR UpdateResult::UpdateResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateResultDefaultTypeInternal() {}
  union {
    UpdateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateResultDefaultTypeInternal _UpdateResult_default_instance_;
PROTOBUF_CONSTEXPR VersionControlResult::VersionControlResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionControlResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionControlResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionControlResultDefaultTypeInternal() {}
  union {
    VersionControlResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionControlResultDefaultTypeInternal _VersionControlResult_default_instance_;
PROTOBUF_CONSTEXPR RowValue::RowValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RowValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RowValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RowValueDefaultTypeInternal() {}
  union {
    RowValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RowValueDefaultTypeInternal _RowValue_default_instance_;
PROTOBUF_CONSTEXPR CellValue::CellValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CellValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellValueDefaultTypeInternal() {}
  union {
    CellValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellValueDefaultTypeInternal _CellValue_default_instance_;
}  // namespace db_connection
static ::_pb::Metadata file_level_metadata_connection_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_connection_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_connection_2eproto = nullptr;

const uint32_t TableStruct_connection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::db_connection::QueryRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::db_connection::QueryRequest, _impl_.query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::ConnectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::db_connection::ConnectResult, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::QueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::db_connection::QueryResult, _impl_.column_names_),
  PROTOBUF_FIELD_OFFSET(::db_connection::QueryResult, _impl_.row_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::UpdateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::db_connection::UpdateResult, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::VersionControlResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::db_connection::VersionControlResult, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::RowValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::db_connection::RowValue, _impl_.cell_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_connection::CellValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::db_connection::CellValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::db_connection::CellValue, _impl_.cell_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::db_connection::QueryRequest)},
  { 8, -1, -1, sizeof(::db_connection::ConnectResult)},
  { 15, -1, -1, sizeof(::db_connection::QueryResult)},
  { 23, -1, -1, sizeof(::db_connection::UpdateResult)},
  { 30, -1, -1, sizeof(::db_connection::VersionControlResult)},
  { 37, -1, -1, sizeof(::db_connection::RowValue)},
  { 44, -1, -1, sizeof(::db_connection::CellValue)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::db_connection::_QueryRequest_default_instance_._instance,
  &::db_connection::_ConnectResult_default_instance_._instance,
  &::db_connection::_QueryResult_default_instance_._instance,
  &::db_connection::_UpdateResult_default_instance_._instance,
  &::db_connection::_VersionControlResult_default_instance_._instance,
  &::db_connection::_RowValue_default_instance_._instance,
  &::db_connection::_CellValue_default_instance_._instance,
};

const char descriptor_table_protodef_connection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020connection.proto\022\rdb_connection\032\033googl"
  "e/protobuf/empty.proto\032\037google/protobuf/"
  "timestamp.proto\")\n\014QueryRequest\022\n\n\002id\030\n "
  "\001(\t\022\r\n\005query\030\013 \001(\t\"\033\n\rConnectResult\022\n\n\002i"
  "d\030\014 \001(\t\"P\n\013QueryResult\022\024\n\014column_names\030\003"
  " \003(\t\022+\n\nrow_values\030\004 \003(\0132\027.db_connection"
  ".RowValue\"\037\n\014UpdateResult\022\017\n\007message\030\002 \001"
  "(\t\"\'\n\024VersionControlResult\022\017\n\007message\030\002 "
  "\001(\t\"9\n\010RowValue\022-\n\013cell_values\030\005 \003(\0132\030.d"
  "b_connection.CellValue\"\303\001\n\tCellValue\022\024\n\n"
  "col_string\030\006 \001(\tH\000\022\021\n\007col_i32\030\007 \001(\005H\000\022.\n"
  "\010col_time\030\010 \001(\0132\032.google.protobuf.Timest"
  "ampH\000\022\023\n\tcol_float\030\t \001(\002H\000\022\024\n\ncol_double"
  "\030\020 \001(\001H\000\022\021\n\007col_i64\030\021 \001(\003H\000\022\022\n\010col_bool\030"
  "\022 \001(\010H\000B\013\n\tcell_type2\207\003\n\022DatabaseConnect"
  "ion\022A\n\tConnectDB\022\026.google.protobuf.Empty"
  "\032\034.db_connection.ConnectResult\022D\n\014Discon"
  "nectDB\022\034.db_connection.ConnectResult\032\026.g"
  "oogle.protobuf.Empty\022C\n\010RunQuery\022\033.db_co"
  "nnection.QueryRequest\032\032.db_connection.Qu"
  "eryResult\022E\n\tRunUpdate\022\033.db_connection.Q"
  "ueryRequest\032\033.db_connection.UpdateResult"
  "\022\\\n\030RunVersionControlCommand\022\033.db_connec"
  "tion.QueryRequest\032#.db_connection.Versio"
  "nControlResultb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_connection_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_connection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_connection_2eproto = {
    false, false, 982, descriptor_table_protodef_connection_2eproto,
    "connection.proto",
    &descriptor_table_connection_2eproto_once, descriptor_table_connection_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_connection_2eproto::offsets,
    file_level_metadata_connection_2eproto, file_level_enum_descriptors_connection_2eproto,
    file_level_service_descriptors_connection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_connection_2eproto_getter() {
  return &descriptor_table_connection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_connection_2eproto(&descriptor_table_connection_2eproto);
namespace db_connection {

// ===================================================================

class QueryRequest::_Internal {
 public:
};

QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.query_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:db_connection.QueryRequest)
}

inline void QueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.query_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:db_connection.QueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.query_.Destroy();
}

void QueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.QueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.query_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "db_connection.QueryRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string query = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "db_connection.QueryRequest.query"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.QueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 10;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.QueryRequest.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  // string query = 11;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.QueryRequest.query");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.QueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 10;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string query = 11;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_class_data_; }


void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryRequest*>(&to_msg);
  auto& from = static_cast<const QueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.QueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[0]);
}

// ===================================================================

class ConnectResult::_Internal {
 public:
};

ConnectResult::ConnectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.ConnectResult)
}
ConnectResult::ConnectResult(const ConnectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:db_connection.ConnectResult)
}

inline void ConnectResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectResult::~ConnectResult() {
  // @@protoc_insertion_point(destructor:db_connection.ConnectResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void ConnectResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.ConnectResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "db_connection.ConnectResult.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.ConnectResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 12;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.ConnectResult.id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.ConnectResult)
  return target;
}

size_t ConnectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.ConnectResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 12;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectResult::GetClassData() const { return &_class_data_; }


void ConnectResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectResult*>(&to_msg);
  auto& from = static_cast<const ConnectResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.ConnectResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectResult::CopyFrom(const ConnectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.ConnectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResult::IsInitialized() const {
  return true;
}

void ConnectResult::InternalSwap(ConnectResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[1]);
}

// ===================================================================

class QueryResult::_Internal {
 public:
};

QueryResult::QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){from._impl_.column_names_}
    , decltype(_impl_.row_values_){from._impl_.row_values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db_connection.QueryResult)
}

inline void QueryResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){arena}
    , decltype(_impl_.row_values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:db_connection.QueryResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_names_.~RepeatedPtrField();
  _impl_.row_values_.~RepeatedPtrField();
}

void QueryResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.QueryResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  _impl_.row_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "db_connection.QueryResult.column_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .db_connection.RowValue row_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.QueryResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.QueryResult.column_names");
    target = stream->WriteString(3, s, target);
  }

  // repeated .db_connection.RowValue row_values = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.QueryResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_names_.size());
  for (int i = 0, n = _impl_.column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_names_.Get(i));
  }

  // repeated .db_connection.RowValue row_values = 4;
  total_size += 1UL * this->_internal_row_values_size();
  for (const auto& msg : this->_impl_.row_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResult::GetClassData() const { return &_class_data_; }


void QueryResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryResult*>(&to_msg);
  auto& from = static_cast<const QueryResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.QueryResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_names_.MergeFrom(from._impl_.column_names_);
  _this->_impl_.row_values_.MergeFrom(from._impl_.row_values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  _impl_.row_values_.InternalSwap(&other->_impl_.row_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[2]);
}

// ===================================================================

class UpdateResult::_Internal {
 public:
};

UpdateResult::UpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.UpdateResult)
}
UpdateResult::UpdateResult(const UpdateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:db_connection.UpdateResult)
}

inline void UpdateResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateResult::~UpdateResult() {
  // @@protoc_insertion_point(destructor:db_connection.UpdateResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void UpdateResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.UpdateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "db_connection.UpdateResult.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.UpdateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.UpdateResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.UpdateResult)
  return target;
}

size_t UpdateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.UpdateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateResult::GetClassData() const { return &_class_data_; }


void UpdateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateResult*>(&to_msg);
  auto& from = static_cast<const UpdateResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.UpdateResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateResult::CopyFrom(const UpdateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.UpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResult::IsInitialized() const {
  return true;
}

void UpdateResult::InternalSwap(UpdateResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[3]);
}

// ===================================================================

class VersionControlResult::_Internal {
 public:
};

VersionControlResult::VersionControlResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.VersionControlResult)
}
VersionControlResult::VersionControlResult(const VersionControlResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionControlResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:db_connection.VersionControlResult)
}

inline void VersionControlResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionControlResult::~VersionControlResult() {
  // @@protoc_insertion_point(destructor:db_connection.VersionControlResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionControlResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void VersionControlResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionControlResult::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.VersionControlResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionControlResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "db_connection.VersionControlResult.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionControlResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.VersionControlResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.VersionControlResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.VersionControlResult)
  return target;
}

size_t VersionControlResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.VersionControlResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionControlResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionControlResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionControlResult::GetClassData() const { return &_class_data_; }


void VersionControlResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionControlResult*>(&to_msg);
  auto& from = static_cast<const VersionControlResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.VersionControlResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionControlResult::CopyFrom(const VersionControlResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.VersionControlResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionControlResult::IsInitialized() const {
  return true;
}

void VersionControlResult::InternalSwap(VersionControlResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionControlResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[4]);
}

// ===================================================================

class RowValue::_Internal {
 public:
};

RowValue::RowValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.RowValue)
}
RowValue::RowValue(const RowValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RowValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_values_){from._impl_.cell_values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db_connection.RowValue)
}

inline void RowValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RowValue::~RowValue() {
  // @@protoc_insertion_point(destructor:db_connection.RowValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RowValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_values_.~RepeatedPtrField();
}

void RowValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RowValue::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.RowValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .db_connection.CellValue cell_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RowValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.RowValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db_connection.CellValue cell_values = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.RowValue)
  return target;
}

size_t RowValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.RowValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .db_connection.CellValue cell_values = 5;
  total_size += 1UL * this->_internal_cell_values_size();
  for (const auto& msg : this->_impl_.cell_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RowValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RowValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RowValue::GetClassData() const { return &_class_data_; }


void RowValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RowValue*>(&to_msg);
  auto& from = static_cast<const RowValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.RowValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_values_.MergeFrom(from._impl_.cell_values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RowValue::CopyFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowValue::IsInitialized() const {
  return true;
}

void RowValue::InternalSwap(RowValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_values_.InternalSwap(&other->_impl_.cell_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RowValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[5]);
}

// ===================================================================

class CellValue::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& col_time(const CellValue* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CellValue::_Internal::col_time(const CellValue* msg) {
  return *msg->_impl_.cell_type_.col_time_;
}
void CellValue::set_allocated_col_time(::PROTOBUF_NAMESPACE_ID::Timestamp* col_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cell_type();
  if (col_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(col_time));
    if (message_arena != submessage_arena) {
      col_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, col_time, submessage_arena);
    }
    set_has_col_time();
    _impl_.cell_type_.col_time_ = col_time;
  }
  // @@protoc_insertion_point(field_set_allocated:db_connection.CellValue.col_time)
}
void CellValue::clear_col_time() {
  if (_internal_has_col_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cell_type_.col_time_;
    }
    clear_has_cell_type();
  }
}
CellValue::CellValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:db_connection.CellValue)
}
CellValue::CellValue(const CellValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cell_type();
  switch (from.cell_type_case()) {
    case kColString: {
      _this->_internal_set_col_string(from._internal_col_string());
      break;
    }
    case kColI32: {
      _this->_internal_set_col_i32(from._internal_col_i32());
      break;
    }
    case kColTime: {
      _this->_internal_mutable_col_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_col_time());
      break;
    }
    case kColFloat: {
      _this->_internal_set_col_float(from._internal_col_float());
      break;
    }
    case kColDouble: {
      _this->_internal_set_col_double(from._internal_col_double());
      break;
    }
    case kColI64: {
      _this->_internal_set_col_i64(from._internal_col_i64());
      break;
    }
    case kColBool: {
      _this->_internal_set_col_bool(from._internal_col_bool());
      break;
    }
    case CELL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:db_connection.CellValue)
}

inline void CellValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_cell_type();
}

CellValue::~CellValue() {
  // @@protoc_insertion_point(destructor:db_connection.CellValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cell_type()) {
    clear_cell_type();
  }
}

void CellValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellValue::clear_cell_type() {
// @@protoc_insertion_point(one_of_clear_start:db_connection.CellValue)
  switch (cell_type_case()) {
    case kColString: {
      _impl_.cell_type_.col_string_.Destroy();
      break;
    }
    case kColI32: {
      // No need to clear
      break;
    }
    case kColTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cell_type_.col_time_;
      }
      break;
    }
    case kColFloat: {
      // No need to clear
      break;
    }
    case kColDouble: {
      // No need to clear
      break;
    }
    case kColI64: {
      // No need to clear
      break;
    }
    case kColBool: {
      // No need to clear
      break;
    }
    case CELL_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CELL_TYPE_NOT_SET;
}


void CellValue::Clear() {
// @@protoc_insertion_point(message_clear_start:db_connection.CellValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cell_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string col_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_col_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "db_connection.CellValue.col_string"));
        } else
          goto handle_unusual;
        continue;
      // int32 col_i32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_col_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp col_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_col_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float col_float = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _internal_set_col_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double col_double = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _internal_set_col_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 col_i64 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_col_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool col_bool = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_set_col_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_connection.CellValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string col_string = 6;
  if (_internal_has_col_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_string().data(), static_cast<int>(this->_internal_col_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_connection.CellValue.col_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_col_string(), target);
  }

  // int32 col_i32 = 7;
  if (_internal_has_col_i32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_col_i32(), target);
  }

  // .google.protobuf.Timestamp col_time = 8;
  if (_internal_has_col_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::col_time(this),
        _Internal::col_time(this).GetCachedSize(), target, stream);
  }

  // float col_float = 9;
  if (_internal_has_col_float()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_col_float(), target);
  }

  // double col_double = 16;
  if (_internal_has_col_double()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_col_double(), target);
  }

  // int64 col_i64 = 17;
  if (_internal_has_col_i64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_col_i64(), target);
  }

  // bool col_bool = 18;
  if (_internal_has_col_bool()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_col_bool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_connection.CellValue)
  return target;
}

size_t CellValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_connection.CellValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cell_type_case()) {
    // string col_string = 6;
    case kColString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_col_string());
      break;
    }
    // int32 col_i32 = 7;
    case kColI32: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_col_i32());
      break;
    }
    // .google.protobuf.Timestamp col_time = 8;
    case kColTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_type_.col_time_);
      break;
    }
    // float col_float = 9;
    case kColFloat: {
      total_size += 1 + 4;
      break;
    }
    // double col_double = 16;
    case kColDouble: {
      total_size += 2 + 8;
      break;
    }
    // int64 col_i64 = 17;
    case kColI64: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_col_i64());
      break;
    }
    // bool col_bool = 18;
    case kColBool: {
      total_size += 2 + 1;
      break;
    }
    case CELL_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellValue::GetClassData() const { return &_class_data_; }


void CellValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellValue*>(&to_msg);
  auto& from = static_cast<const CellValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:db_connection.CellValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cell_type_case()) {
    case kColString: {
      _this->_internal_set_col_string(from._internal_col_string());
      break;
    }
    case kColI32: {
      _this->_internal_set_col_i32(from._internal_col_i32());
      break;
    }
    case kColTime: {
      _this->_internal_mutable_col_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_col_time());
      break;
    }
    case kColFloat: {
      _this->_internal_set_col_float(from._internal_col_float());
      break;
    }
    case kColDouble: {
      _this->_internal_set_col_double(from._internal_col_double());
      break;
    }
    case kColI64: {
      _this->_internal_set_col_i64(from._internal_col_i64());
      break;
    }
    case kColBool: {
      _this->_internal_set_col_bool(from._internal_col_bool());
      break;
    }
    case CELL_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellValue::CopyFrom(const CellValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_connection.CellValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellValue::IsInitialized() const {
  return true;
}

void CellValue::InternalSwap(CellValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cell_type_, other->_impl_.cell_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace db_connection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::db_connection::QueryRequest*
Arena::CreateMaybeMessage< ::db_connection::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::db_connection::ConnectResult*
Arena::CreateMaybeMessage< ::db_connection::ConnectResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::ConnectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::db_connection::QueryResult*
Arena::CreateMaybeMessage< ::db_connection::QueryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::db_connection::UpdateResult*
Arena::CreateMaybeMessage< ::db_connection::UpdateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::UpdateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::db_connection::VersionControlResult*
Arena::CreateMaybeMessage< ::db_connection::VersionControlResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::VersionControlResult >(arena);
}
template<> PROTOBUF_NOINLINE ::db_connection::RowValue*
Arena::CreateMaybeMessage< ::db_connection::RowValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::RowValue >(arena);
}
template<> PROTOBUF_NOINLINE ::db_connection::CellValue*
Arena::CreateMaybeMessage< ::db_connection::CellValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db_connection::CellValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
